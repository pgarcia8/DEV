 /*********************************************************************** * Accela Automation * File:  * Accela, Inc. * Copyright (C): 2011 *  * Description: This is EMSE script template for create/update Ref. LP from existing Record(CAP). *   *  Precondition: *  1. an existing Record with configured contact information and ASI *		Example in this sample script: *		- CAP ID = 11CAP-00000-00038 *		- CAP Type = XXX/MWBE/XXX/XXX *		- CAP Contact *			- Type = Business Contact *		- CAP ASI  *			- CLASSIFICATION *				- Classification = WBE (Dropdownlist)  *				- Ethnicity = XXX (Dropdownlist)  *			- MAIN BUSINESS INFORMATION *				- FMS Vendor Number = XXX (Text)  *  2. an existing Ref. ASI group with configured CERTIFICATION and ETHNICITY fields (named 'NIGP' in this sample script) *		Example in this sample script: *		- Group Name = NIGP *		- ASIT = NIGP *			- subgroup1 = CERTIFICATION  *				- column1 = Certification Type (Dropdownlist)  *			- subgroup2 = ETHNICITY  	 *				- column1 = Ethnicity (Dropdownlist) *  * Notes: * * Revision History: * <Date>,		<Who>,			<What> * 2011-03-09		jovy.wang		Initial. **********************************************************************/// ------------------------- Hard Code Constants (Please do not change these variables) -------------------------// LP ASIT fieldsvar LP_ASIT_FIELD_CERTIFICATION_TYPE = "Certification Type"; // used by LP search functionvar LP_ASIT_FIELD_ETHNICITY = "Ethnicity"; // used by LP search function// LP classificationvar CLASSIFICATION_EBE = "EBE"; // configured in standard choicevar CLASSIFICATION_LBE = "LBE"; // configured in standard choicevar CLASSIFICATION_WBE = "WBE"; // configured in standard choicevar CLASSIFICATION_MBE = "MBE"; // configured in standard choice// ------------------------- End Hard Code Constants -------------------------// ------------------------- Constants (You can change these variables if needed) -------------------------// Contact typevar CAP_CONTACT_TYPE = "Business Contact";// License typevar LP_LICENSE_TYPE = "Certified Business";// CAP typevar CAP_TYPE_LBE = "LBE";var CAP_TYPE_EBE = "EBE";var CAP_TYPE_MWBE = "MWBE";// LP ASI/ASIT structurevar LP_ASI_GROUP_NIGP = "CERTBUSINESS";var LP_ASIT_GROUP_NIGP = "CERTBUSINESS";var LP_ASIT_SUBGROUP_CERTIFICATION = "CERTIFICATION";var LP_ASIT_SUBGROUP_ETHNICITY = "ETHNICITY";// cap ASI for "Main Business Information"var CAP_ASI_SUBGROUP_MAIN_BUS_INFO = "MAIN BUSINESS INFORMATION";var CAP_ASI_FIELD_VENDOR_ID = "FMS Vendor Number";// cap ASI for "Classification"var CAP_ASI_SUBGSUBGROUPE_CLASSIFICATION = "CLASSIFICATION";var CAP_ASI_FIELD_CLASSIFICATION = "Classification";var CAP_ASI_FIELD_ETHNICITY = "Ethnicity";// ------------------------- End Constants -------------------------// ------------------------- main process -------------------------var error = "";var message = "Successfully.<br>";var br = "<br>";// test 'copy Cap info to Ref. LP'main();// handle the resultif (error && error.length > 0){	aa.env.setValue("ScriptReturnCode", "1");	aa.env.setValue("ScriptReturnMessage", error);}else{	aa.env.setValue("ScriptReturnCode", "0");	aa.env.setValue("ScriptReturnMessage", message);}// ------------------------- define functions -------------------------// test 'copy Cap info to Ref. LP'function main(){	var capID1 =  aa.env.getValue("PermitId1");	var capID2 =  aa.env.getValue("PermitId2");	var capID3 =  aa.env.getValue("PermitId3");	// copy Cap info to Ref. LP	copyCapInfoToRefLP(capID1, capID2, capID3);}// copy Cap info to Ref. LP// if the Ref. LP does not exist, creat it, otherwise update itfunction copyCapInfoToRefLP(capID1, capID2, capID3){	// construct the capIDModel	var result = aa.cap.getCapID(capID1, capID2, capID3);	var capIDModel = getOutput(result, "capID");	// 1. get cap business contact	var capBusinessContact = getCapBusinessContact(capIDModel);	// 2. get cap ASI fields	var vendorID = getCapASIField(capIDModel, CAP_ASI_SUBGROUP_MAIN_BUS_INFO, CAP_ASI_FIELD_VENDOR_ID);	var ethnicity = getCapASIField(capIDModel, CAP_ASI_SUBGSUBGROUPE_CLASSIFICATION, CAP_ASI_FIELD_ETHNICITY);	var classification = getClassification(capIDModel);	// 3. construct Ref. LP model	var licenseScriptModel = buildtRefLP(capBusinessContact, vendorID, classification, ethnicity);	// 4. create or update Ref. LP	createOrUpdateRefLP(licenseScriptModel);}// get first CAP business contactfunction getCapBusinessContact(capIDModel){	var result = aa.people.createPeopleModel();	var newPeople = result.getOutput().getPeopleModel();	newPeople.setServiceProviderCode(capIDModel.getServiceProviderCode());	newPeople.setContactType(CAP_CONTACT_TYPE);	// get cap contact	result = aa.people.getCapContactByRefPeopleModel(capIDModel, newPeople);	var capContactScirptModels = getOutput(result, "CAP Contact");	if (capContactScirptModels != null && capContactScirptModels.length > 0)	{		return capContactScirptModels[0].getCapContactModel();	}	logError("ERROR: Failed to get CAP Contact: " + result.getErrorMessage());	return null;}// get the value by ASI subgroup and fieldfunction getCapASIField(capIDModel, subGroupName, fieldName){	var result = aa.appSpecificInfo.getByCapID(capIDModel);	var asiModels = getOutput(result, "getAppSpecificInfoByCap");	for (var i=0; i < asiModels.length; i++)	{		var asiModel = asiModels[i];		if (subGroupName == (asiModel.getCheckboxType()) && fieldName == (asiModel.getCheckboxDesc()))		{			return asiModel.getChecklistComment();		}	}	return null;}// get classificationfunction getClassification(capIDModel){		// get classification defined in CAP ASI		var classification = getCapASIField(capIDModel, CAP_ASI_SUBGSUBGROUPE_CLASSIFICATION,			CAP_ASI_FIELD_CLASSIFICATION);				return classification;}// get Ref. LP by state licensefunction getRefLicenseProfByStateLicense(serviceProviderCode, stateLicense){	var licenseScriptModel = null;	var result = aa.licenseScript.getRefLicensesProfByLicNbr(serviceProviderCode, stateLicense);	var licenseScriptModels = getOutput(result, "getRefLicensesProfByLicNbr");	if (licenseScriptModels != null && licenseScriptModels.length > 0)	{		// get first one		licenseScriptModel = licenseScriptModels[0];		// get license template		result = aa.genericTemplate.getTemplate(licenseScriptModel.getLicenseModel().getEntityPK());		var templateModel = getOutput(result, "getTemplate");		licenseScriptModel.getLicenseModel().setTemplate(templateModel);	}	return licenseScriptModel;}// build Ref. LP// if the LP exists, get it from the database, otherwise, construct a new onefunction buildtRefLP(capBusinessContact, vendorID, classification, ethnicity){	var servProvCode = capBusinessContact.getCapID().getServiceProviderCode();	var licenseScriptModel = getRefLicenseProfByStateLicense(servProvCode, vendorID);	if (licenseScriptModel == null)	{		// initialize a new license script model		licenseScriptModel = createLicenseScriptModelWithTemplate(vendorID, LP_ASI_GROUP_NIGP);		var licenseModel = licenseScriptModel.getLicenseModel();		licenseModel.setServiceProviderCode(servProvCode);		licenseModel.setLicenseType(LP_LICENSE_TYPE);		licenseModel.setStateLicense(vendorID); // set vendor ID		licenseModel.setLicState("AL");		licenseModel.setAuditID("ADMIN");		licenseModel.setAuditStatus("A");		licenseModel.setAuditDate(null);	}	// update license information	var licenseModel = licenseScriptModel.getLicenseModel();	licenseModel.setTitle(capBusinessContact.getTitle()); // copy "title" from cap contact to Ref. LP	licenseModel.setPhone3(capBusinessContact.getPhone3()); // copy "phone3"	licenseModel.setPhone3CountryCode(capBusinessContact.getPhone3CountryCode()); // copy "phone3CountryCode"	licenseModel.setBusinessName(capBusinessContact.getBusinessName()); // copy "orgnizationName" ??	licenseModel.setAcaPermission("Y"); // set default value for 'Display in ACA'		// construct values map by sub group name	var valuesMapBySubgroup = aa.util.newHashMap();	putTableValuesToMap(valuesMapBySubgroup, LP_ASIT_SUBGROUP_CERTIFICATION, LP_ASIT_FIELD_CERTIFICATION_TYPE, classification);	putTableValuesToMap(valuesMapBySubgroup, LP_ASIT_SUBGROUP_ETHNICITY, LP_ASIT_FIELD_ETHNICITY, ethnicity);		// add table values to templateModel	addTableValuesToTemplateModel(licenseModel.getTemplate(), LP_ASIT_GROUP_NIGP, valuesMapBySubgroup);		return licenseScriptModel;}// put table values to given mapfunction putTableValuesToMap(valuesMapBySubgroup, subGroupName, fieldName, value){	if (valuesMapBySubgroup == null)	{		return;	}		var valuesMapByField = valuesMapBySubgroup.get(subGroupName);	if (valuesMapByField == null)	{		valuesMapByField = aa.util.newHashMap();		valuesMapBySubgroup.put(subGroupName, valuesMapByField);	}		valuesMapByField.put(fieldName, value);}// add table values to given templateModelfunction addTableValuesToTemplateModel(templateModel, objectGroupName, valuesMapBySubgroup){	if (templateModel != null )	{		var templateTables = templateModel.getTemplateTables();				if (templateTables != null )		{			for (var i=0; i<templateTables.size(); i++)			{				var templateTable = templateTables.get(i);				var groupName = templateTable.getGroupName();				if (objectGroupName != groupName)				{					continue;				}								addTableValuesToTemplateTable(templateTable, valuesMapBySubgroup);					}		}	}}// add table values to given templateTablefunction addTableValuesToTemplateTable(templateTable, valuesMapBySubgroup){	var templateSubgroups = templateTable.getSubgroups();	if (templateSubgroups != null )	{		for (var i=0; i<templateSubgroups.size(); i++)		{			var templateSubgroup = templateSubgroups.get(i);			var subgroupName = templateSubgroup.getSubgroupName();			var valuesMapByField = valuesMapBySubgroup.get(subgroupName);			if (valuesMapByField == null || valuesMapByField.size() == 0)			{				continue;			}				// add new template row to given subGroup			addTableValuesToTemplateSubGroup(templateSubgroup, valuesMapByField);		}	}	return;}// add table values to given TemplateSubgroupfunction addTableValuesToTemplateSubGroup(templateSubgroup, valuesMapByField){	if (valuesMapByField == null || valuesMapByField.size() == 0)	{		return;	}		if (templateSubgroup.getRows() == null)	{		templateSubgroup.setRows(aa.util.newArrayList());	}	var rowIndex = aa.util.parseLong("" + (templateSubgroup.getRows().size() + 1));	// construct table values	var tablevalues = aa.util.newArrayList();	var fields = templateSubgroup.getFields();	for (var i=0; i<fields.size(); i++)	{		var field = fields.get(i);		// construct new table value		var value = valuesMapByField.get(field.getFieldName());		var tablevalue = aa.genericTemplate.createGenericTemplateTableValue(rowIndex, field, value);		tablevalues.add(tablevalue);	}	// construct new row	var templateRow = aa.genericTemplate.createTemplateRow(rowIndex, tablevalues);	templateRow.setValues(tablevalues);	// add the new row templateSubGroup	templateSubgroup.getRows().add(templateRow);}// create new licenseScriptModel with license templatefunction createLicenseScriptModelWithTemplate(vendorID, asiGroupName){	var licenseScriptModel = aa.licenseScript.createLicenseScriptModel();	var licenseModel = licenseScriptModel.getLicenseModel();	// set license template	var result = aa.genericTemplate.getTemplateStructureByGroupName(asiGroupName);	licenseModel.setTemplate(result.getOutput());		return licenseScriptModel;}// create or update Ref.LP// if the LP exists, update it; otherwise create itfunction createOrUpdateRefLP(licenseScriptModel){	var refLPModelInDB = getRefLicenseProfByStateLicense(licenseScriptModel.getServiceProviderCode(), licenseScriptModel.getStateLicense());	if (refLPModelInDB != null)	{		var result = aa.licenseScript.editRefLicenseProf(licenseScriptModel);		getOutput(result, "editRefLicenseProf");		logMessage("The Ref. LP exists, so update it.");	}	else	{		var result = aa.licenseScript.createRefLicenseProf(licenseScriptModel);		getOutput(result, "createRefLicenseProf");		logMessage("The Ref. LP does not exist, so creat it.");	}}// get output of scriptResult, log error if failedfunction getOutput(result, object){	if (result.getSuccess())	{		return result.getOutput();	}	else	{		logError("ERROR: Failed to get " + object + ": " + result.getErrorMessage());		return null;	}}// log errorfunction logError(str){	error += str + br;}// log messagefunction logMessage(str){	message += str + br;}