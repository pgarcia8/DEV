 // ********     Predefined params For Unit Test     *********//      09CAP-00000-001TI  aa.env.setValue("PermitId1", "09CAP");aa.env.setValue("PermitId2", "00000");aa.env.setValue("PermitId3", "001TR");// *********     End of For Unit Test     *******var toProviderMailTO = '';   //Provider's Email;var toProviderMailFROM = 'ACA_system@Accela.com';var toProviderMailCC = 'dylan.liang@achievo.com';var toProviderMailContentType = 'ACA_EMAIL_SCORES_UPDATE_NOTICE_PROVIDER_CONTENT';var toProviderMailSubjectType = 'ACA_EMAIL_SCORES_UPDATE_NOTICE_PROVIDER_SUBJECT';var toAgencyMailTO = '';   //Agency user's Email;var toAgencyMailFROM = 'Auto_Sender@Accela.com';var toAgencyMailCC = 'dylan.liang@achievo.com';var toAgencyMailContentType = 'ACA_EMAIL_SCORES_UPDATE_NOTICE_AGENCY_CONTENT';var toAgencyMailSubjectType = 'ACA_EMAIL_SCORES_UPDATE_NOTICE_AGENCY_SUBJECT';//BizDomain value of ACA_EMAIL_TO_AND_FROM_SETTING.var ToAgency_EmailTo = "SCORES_UPDATE_NOTICE_AGENCY_MAILTO";var ToAgency_EmailFrom = "SCORES_UPDATE_NOTICE_AGENCY_MAILFROM";var ToProvider_EmailTo = "SCORES_UPDATE_NOTICE_PROVIDER_MAILTO";var ToProvider_EmailFrom = "SCORES_UPDATE_NOTICE_PROVIDER_MAILFROM";var taskPath ="Application Acceptance"var nextTaskStatus = "Go To Next Task";var servProvCode = aa.getServiceProviderCode();	var examModelList = aa.env.getValue("ExaminationModelList");var publicUser = aa.env.getValue("PublicUserModel");var provider = aa.env.getValue("ProviderModel");var csvFileName = aa.env.getValue("FileName");var isUploadSuccessful = aa.env.getValue("isSuccessful");//EMSE main()if(isUploadSuccessful){	sendNoticeEmailToProvider();		sendNoticeEmailToAgency();		updateWorkflow()}function sendNoticeEmailToProvider(){		var mailFROM = getEmailAddress(ToProvider_EmailFrom); //toProviderMailFROM;	var mailTO = publicUser.getEmail();	var mailCC = toProviderMailCC;	var contentType = toProviderMailContentType;	var subjectType = toProviderMailSubjectType;		aa.print("mailFROM:: " + mailFROM);	aa.print("mailTO:: " + mailTO);	aa.print("mailCC:: " + mailCC);	aa.print("contentType:: " + contentType);	aa.print("subjectType:: " + subjectType);		var mailcontent = getEmailContent(contentType);	aa.print("mailcontent:: " + mailcontent);		var mailsuject = getEmailSubject(subjectType);	aa.print("mailsuject:: " + mailsuject);	var s_result = aa.sendMail(mailFROM, mailTO, mailCC, mailsuject, mailcontent);		if(s_result.getSuccess())	{		aa.log('Message: notice provider email send successful!');		return true;			}	else	{		aa.log('Message: notice provider email send failed!');		return false;	}}function sendNoticeEmailToAgency(){		var mailFROM = getEmailAddress(ToAgency_EmailFrom); //toAgencyMailFROM;	var mailTO = getEmailAddress(ToAgency_EmailTo); //toAgencyMailTO;	var mailCC = toAgencyMailCC;	var contentType = toAgencyMailContentType;	var subjectType = toAgencyMailSubjectType;	var fileName = csvFileName;		aa.print("mailFROM:: " + mailFROM);	aa.print("mailTO:: " + mailTO);		aa.print("mailCC:: " + mailCC);	aa.print("contentType:: " + contentType);	aa.print("subjectType:: " + subjectType);		var mailcontent = getEmailContent(contentType);	aa.print("mailcontent:: " + mailcontent);		var mailsuject = getEmailSubject(subjectType);	aa.print("mailsuject:: " + mailsuject);	var s_result = aa.sendEmail(mailFROM, mailTO, mailCC, mailsuject, mailcontent, fileName);		if(s_result.getSuccess())	{		aa.log('Message: notice email send successful!');		return true;			}	else	{		aa.log('Message: notice email send failed!');		return false;	}}function getEmailAddress(bizDomainValue){	var mailAddress = null;	var result = aa.bizDomain.getBizDomainByValue("ACA_EMAIL_TO_AND_FROM_SETTING", bizDomainValue);		if(result.getSuccess())	{		var bizDomainModel = result.getOutput();		if(bizDomainModel != null && bizDomainModel.getDescription() != null)		{			mailAddress = bizDomainModel.getDescription();		}	}		return mailAddress;}//get email content.function getEmailContent(contentType){		var pamaremeters = aa.util.newHashtable();		addParameter(pamaremeters, "$$servProvCode$$", servProvCode);		if(provider != null)	{		addParameter(pamaremeters, "$$ProviderName$$", provider.getProviderName());		addParameter(pamaremeters, "$$ProviderNumber$$", provider.getProviderNo());	}		var emailContent = aa.util.newStringBuffer();	emailContent.append("<meta http-equiv=Content-Type content=text/html; charset=UTF-8>");	var mailcontent = aa.util.getCustomContentByType(contentType,pamaremeters);	emailContent.append(mailcontent);		return emailContent.toString();}//get email subject.function getEmailSubject(subjectType){	var pamaremeters = aa.util.newHashtable();	addParameter(pamaremeters, "$$servProvCode$$", servProvCode);		if(provider != null)	{		addParameter(pamaremeters, "$$ProviderName$$", provider.getProviderName());		addParameter(pamaremeters, "$$ProviderNumber$$", provider.getProviderNo());	}		var mailSubject = aa.util.getCustomContentByType(subjectType, pamaremeters);		if(mailSubject == null)	{		mailSubject = '';	}		return mailSubject;}//add parameter to map.function addParameter(pamaremeters, key, value){	if(key != null)	{		if(value == null)		{			value = '';		}				pamaremeters.put(key, value);	}}function updateWorkflow(){	//Validation Examination Array	if(examModelList == null || examModelList.length == 0)	{		return;	}			for (loopk in examModelList)	{		//1. Look Examination Array		var examModel = examModelList[loopk];				//2. Get Cap ID.		var capId = aa.cap.getCapID(examModel.getB1PerId1(),examModel.getB1PerId2(),examModel.getB1PerId3()).getOutput();				if(capId == null)		{			continue;		}				var capIdScriptModel = aa.cap.createCapIDScriptModel(capId.getID1(),capId.getID2(),capId.getID3());								// 3. get examination passResult 		var passResult = aa.examination.isExaminationPassed(capIdScriptModel);		aa.print("Cap ID:" + capId+ " Pass Result: " + passResult.getSuccess());				if (passResult.getSuccess())		{			aa.print("passResult.getOutput(): "+ passResult.getOutput());			if (passResult.getOutput().booleanValue())			{				// 4. Get workflow task item				var taskResult = aa.workflow.getTask(capId, taskPath);				if(taskResult.getSuccess())						//examination is passed				{								//5. update task status						var sTask = taskResult.getOutput();						aa.print("get task successful : task name = " + sTask.getTaskDescription() + "; Process name = " + sTask.getProcessCode()+											"; Disposition = " + sTask.getDisposition());						sTask.setDisposition(nextTaskStatus);										updateResult = aa.workflow.handleDisposition(sTask.getTaskItem(),capId);										if(updateResult.getSuccess()){							aa.print("update task status successfully!")						}						else						{							aa.print("ERROR: Failed to update task status!")						}				}//if get task successfully				else 				{					aa.print("ERROR: Failed to get workflow task(" + capId + ") for review: " + taskResult.getErrorMessage());				}//if else getting task is failed			}//if examination is passed		}//if get isPassed successfully		else		{			aa.print("ERROR: Failed to get isExaminationPassed(" + capId + "): " + passResult.getErrorMessage());		}// if else get isPassed fail	}}