 //--------------------------------------------------------------------------------------------------------------------// test the publicUserScript /** Test scipt for   public Long createPublicUser(PublicUserModel publicUser)   * throws AAException, RemoteException; */ var publicUser = aa.publicUser.getPublicUserModel();var genID = "Gary0813" + Math.random();publicUser.setFirstName("Gary0813");publicUser.setLastName("Gan");publicUser.setEmail(genID + "@achievo.com");publicUser.setUserID(genID);publicUser.setPassword("7d3fe8b8d7ba80addfc296b07de60cc101e4af60");//password : Gary0813publicUser.setAuditID("PublicUser");publicUser.setAuditStatus("A"); publicUser.setCellPhone("123456789");publicUser.setZip("123456"); aa.print(""); aa.print("-- test createPublicUser(PublicUserModel publicUser) start. --");   result = aa.publicUser.createPublicUser(publicUser); if(result.getSuccess()){      aa.print(" sucessfully.");    userSeqNum = result.getOutput();    aa.print("userSeqNum=" + userSeqNum);}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test createPublicUser(PublicUserModel publicUser) end. --");       /** Test script for public Long createPublicUser(PublicUserModel publicUser, LicenseModel[] licenseModels)  * throws AAException, RemoteException;  */var licenseModels = new Array();licenseModels[0]=aa.publicUser.getLicenseModel();var publicUser = aa.publicUser.getPublicUserModel();var genID = "Gary0813" + Math.random();publicUser.setFirstName("Gary0813");publicUser.setLastName("Gan");publicUser.setEmail(genID + "@achievo.com");publicUser.setUserID(genID);publicUser.setPassword("7d3fe8b8d7ba80addfc296b07de60cc101e4af60");//password : Gary0813publicUser.setAuditID("PublicUser");publicUser.setAuditStatus("A"); publicUser.setCellPhone("123456789");publicUser.setZip("123456"); //notice add this propertypublicUser.setUserSeqNum(111); aa.print(""); aa.print("-- test createPublicUser(PublicUserModel publicUser, LicenseModel[] licenseModels) start. --");   result = aa.publicUser.createPublicUser(publicUser, licenseModels); if(result.getSuccess()){      aa.print(" sucessfully.");    userSeqNum = result.getOutput();    aa.print("userSeqNum=" + userSeqNum);}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test createPublicUser(PublicUserModel publicUser, LicenseModel[] licenseModels) end. --");    /** Test script for  public void editPublicUser(PublicUserModel publicUser)   * throws AAException, RemoteException;  */ var cellPhone="13950156994";var userSeqNum=9053;    aa.print(""); aa.print("-- test editPublicUser(PublicUserModel publicUser) start. --"); aa.print("Set cell phone to : "+cellPhone);     result = aa.publicUser.getPublicUser(userSeqNum);publicUser = result.getOutput();aa.print("oldPublicuser.cellPhone=" + publicUser.getCellPhone()); publicUser.setCellPhone(cellPhone);result = aa.publicUser.editPublicUser(publicUser);if(result.getSuccess()){      aa.print(" sucessfully.");    result = aa.publicUser.getPublicUser(userSeqNum);    updatedPublicuser = result.getOutput();    aa.print("updatedPublicuser.cellPhone=" + updatedPublicuser.getCellPhone());}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test editPublicUser(PublicUserModel publicUser) end. --");      /** Test script for public String resetPassword(String userID)  * throws AAException, RemoteException;  */  var userID="mmain@bfi.com"; aa.print(""); aa.print("-- test resetPassword(String userID) start. --");  result = aa.publicUser.resetPassword(userID); if(result.getSuccess()){      aa.print(" sucessfully.");    publicUser = result.getOutput();    aa.print(" New password : "+result.getOutput());}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test resetPassword(String userID) end. --");      /**Test script for public Long isExistingUser(String userID)  * throws AAException, RemoteException;  */    var userID="mmain@bfi.com"; aa.print(""); aa.print("-- test isExistingUser(String userID) start. --");    result = aa.publicUser.isExistingUser(userID); if(result.getSuccess()){      aa.print(" sucessfully.");    userSeqNum = result.getOutput();    aa.print("userID=" + userID );    aa.print("userSeqNum=" + userSeqNum);}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test isExistingUser(String userID) end. --");     /** Test script for public PublicUserModel getPublicUser(Long userSeqNum)  *  throws AAException, RemoteException;  */    var userSeqNum=9053; aa.print(""); aa.print("-- test getPublicUser(Long userSeqNum) start. --");   result = aa.publicUser.getPublicUser(userSeqNum); if(result.getSuccess()){      aa.print(" sucessfully.");    publicUser = result.getOutput();    aa.print("publicuser.user_id=" + publicUser.getUserID());}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test getPublicUser(Long userSeqNum) end. --");    /** Test script for public PublicUserModel getOrganizatonOwner(DepartmentModel organization)  * throws AAException, RemoteException;  */    var organization = aa.publicUser.getDepartmentModel(); aa.print(""); aa.print("-- test getOrganizatonOwner(DepartmentModel organization) start. --");  result = aa.publicUser.getOrganizatonOwner(organization);if(result.getSuccess()){      aa.print(" sucessfully.");}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test getOrganizatonOwner(DepartmentModel organization) end. --");      /** Test script for public void createPublicUserForAgency(PublicUserModel publicUser)  * throws AAException, RemoteException;  */  var publicUser = aa.publicUser.getPublicUserModel();var genID = "Gary0813" + Math.random();publicUser.setFirstName("Gary0813");publicUser.setLastName("Gan");publicUser.setEmail(genID + "@achievo.com");publicUser.setUserID(genID);publicUser.setPassword("7d3fe8b8d7ba80addfc296b07de60cc101e4af60");//password : Gary0813publicUser.setAuditID("PublicUser");publicUser.setAuditStatus("A"); publicUser.setCellPhone("123456789");publicUser.setZip("123456");//notice add this propertypublicUser.setUserSeqNum(111); aa.print(""); aa.print("-- test createPublicUserForAgency(PublicUserModel publicUser) start. --");     result = aa.publicUser.createPublicUserForAgency(publicUser);if(result.getSuccess()){      aa.print(" sucessfully.");  }else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test createPublicUserForAgency(PublicUserModel publicUser) end. --");     /** Test script for public Collection signon(String userId, String password)  * throws AAException, RemoteException;  */       var userID="mmain@bfi.com";var password="984e18fe201c8f99e0e443707464d5b5ffaf326a"; aa.print(""); aa.print("-- test signon(String userId, String password) start. --");  result = aa.publicUser.signon(userID, password); if(result.getSuccess()){      aa.print(" sucessfully.");}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test signon(String userId, String password) end. --");      /** Test script for public Collection getPublicUserBySearchKeys(PublicUserModel puser, boolean searchAllAgencies)  * throws AAException,RemoteException;  */ var publicUser = aa.publicUser.getPublicUserModel();publicUser.setUserID("mmain@bfi.com"); aa.print(""); aa.print("-- test getPublicUserBySearchKeys(PublicUserModel puser, boolean searchAllAgencies) start. --");   result=aa.publicUser.getPublicUserBySearchKeys(publicUser,false); if(result.getSuccess()){      aa.print(" sucessfully.");}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test getPublicUserBySearchKeys(PublicUserModel puser, boolean searchAllAgencies) end. --");    /** Test script for public void disablePublicUserAccount(PublicUserModel puser, boolean disableAllAgencyAccounts)  * throws AAException,RemoteException;  */    var userSeqNum=9053; aa.print(""); aa.print("-- test disablePublicUserAccount(PublicUserModel puser, boolean disableAllAgencyAccounts) start. --");  var publicUser = aa.publicUser.getPublicUser(userSeqNum).getOutput();result=aa.publicUser.disablePublicUserAccount(publicUser,false); if(result.getSuccess()){      aa.print(" sucessfully.");}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test disablePublicUserAccount(PublicUserModel puser, boolean disableAllAgencyAccounts) end. --");      /** Test script for public boolean checkPublicUserAccountInAgency(String servProvCode, PublicUserModel puser)  * throws AAException,  PublicUserNotRegisterInAgencyException, RemoteException;  */    var userSeqNum=9053; aa.print(""); aa.print("-- test checkPublicUserAccountInAgency(String servProvCode, PublicUserModel puser) start. --");   publicUser = aa.publicUser.getPublicUser(userSeqNum).getOutput();;result=aa.publicUser.checkPublicUserAccountInAgency(publicUser);if(result.getSuccess()){      aa.print(" sucessfully.");    isExit = result.getOutput();    aa.print(" check result : "+isExit);}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test checkPublicUserAccountInAgency(String servProvCode, PublicUserModel puser) end. --");    /** Test script for public void removePublicUserInfoFromAgency(String servProvCode, PublicUserModel puser)  * throws AAException,RemoteException;     */    var userSeqNum = 9053; aa.print(""); aa.print("-- test removePublicUserInfoFromAgency(String servProvCode, PublicUserModel puser) start. --");   var publicUser = aa.publicUser.getPublicUser(userSeqNum).getOutput(); result = aa.publicUser.removePublicUserInfoFromAgency(publicUser);if(result.getSuccess()){      aa.print(" sucessfully.");}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test removePublicUserInfoFromAgency(String servProvCode, PublicUserModel puser) end. --");    /** Test script for public void updateEmail4PublicUser(PublicUserModel puser, String oldEmail, String callId)  * throws AAException, RemoteException;  */       var userSeqNum = 9053;var newEmail = "newEmail@achievo.com"; aa.print(""); aa.print("-- test updateEmail4PublicUser(String servProvCode, PublicUserModel puser, String oldEmail, String callId) start. --");   publicUser = aa.publicUser.getPublicUser(userSeqNum).getOutput(); oldEmail = publicUser.getEmail();publicUser.setEmail(newEmail);result = aa.publicUser.updateEmail4PublicUser(publicUser,oldEmail);if(result.getSuccess()){      aa.print(" sucessfully.");}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test updateEmail4PublicUser(String servProvCode, PublicUserModel puser, String oldEmail, String callId) end. --");       /** Test script for public boolean isRegisterred(long userSeqNum)  * throws AAException, RemoteException;  */var userSeqNum=9053;aa.print(""); aa.print("-- test isRegisterred(long userSeqNum) start. --");     result = aa.publicUser.isRegisterred(userSeqNum);  if(result.getSuccess()){      aa.print(" sucessfully.");    aa.print(result.getOutput());}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test isRegisterred(long userSeqNum) end. --");   /** Test script for public void sendActivateEmail(PublicUserModel publicUserModel, boolean isAgencyUser, boolean isActivated)  * throws AAException, RemoteException;  */var userSeqNum=9053;var publicUser = aa.publicUser.getPublicUser(userSeqNum).getOutput();var isAgencyUser = true;var isActivated = true;aa.print(""); aa.print("-- test sendActivateEmail(PublicUserModel publicUserModel, boolean isAgencyUser, boolean isActivated) start. --");     result = aa.publicUser.sendActivateEmail(publicUser, isAgencyUser, isActivated);  if(result.getSuccess()){      aa.print(" sucessfully.");}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test sendActivateEmail(PublicUserModel publicUserModel, boolean isAgencyUser, boolean isActivated) end. --");     /** Test script for public PublicUserModel getPublicUserByEmail(String email)  * throws AAException, RemoteException;  */var email="mmain@bfi.com";aa.print(""); aa.print("-- test getPublicUserByEmail(String email) start. --");     result = aa.publicUser.getPublicUserByEmail(email);  if(result.getSuccess()){      aa.print(" sucessfully.");    publicUser = result.getOutput();    aa.print("publicUser.getFirstName=" + publicUser.getFirstName());}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test getPublicUserByEmail(String email) end. --");   /** Test script for public PublicUserModel getPublicUserByUserId(String userId)  * throws AAException, RemoteException;  */var userId="mmain@bfi.com";aa.print(""); aa.print("-- test getPublicUserByUserId(String userId) start. --");     result = aa.publicUser.getPublicUserByUserId(userId);  if(result.getSuccess()){      aa.print(" sucessfully.");    publicUser = result.getOutput();    aa.print("publicUser.getFirstName=" + publicUser.getFirstName());}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test getPublicUserByUserId(String userId) end. --");   /** Test script for public void sendPasswordEmail(PublicUserModel publicUserModel)  * throws AAException, RemoteException;  */var userSeqNum=9053;var publicUser = aa.publicUser.getPublicUser(userSeqNum).getOutput();aa.print(""); aa.print("-- test sendPasswordEmail(PublicUserModel publicUserModel) start. --");     result = aa.publicUser.sendPasswordEmail(publicUser); if(result.getSuccess()){      aa.print(" sucessfully.");}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- sendPasswordEmail(PublicUserModel publicUserModel) end. --");      /** Test script for public PublicUserModel getPublicUserByPUser(String puserUserName)  * throws AAException, RemoteException;  */ var puserUserName="Mike"; aa.print(""); aa.print("-- test getPublicUserByPUser(String puserUserName) start. --");     result = aa.publicUser.getPublicUserByPUser(puserUserName); if(result.getSuccess()){    aa.print(" sucessfully.");	publicUser = result.getOutput();	if (publicUser != null)	{		aa.print("publicUser.getFirstName=" + publicUser.getFirstName());	}	else	{		aa.print("but can not find the user:" + puserUserName);			}}else{   aa.print(" failure: " + result.getErrorMessage()); } aa.print("-- test getPublicUserByPUser(String puserUserName) end. --");      